---
- name: Install postgresql repository
  ansible.builtin.yum:
    name: https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
    state: installed
    disable_gpg_check: true

- name: Disable built-in PostgreSQL Module
  ansible.builtin.command: "dnf -qy module disable postgresql"

- name: Install postgresql
  ansible.builtin.dnf:
    name: ['{{ POSTGRESQL_PACKAGE }}-server', python3-psycopg2]
    state: installed

- name: Check database already initialized
  ansible.builtin.stat:
    path: "{{ PGSQL_PATH }}/PG_VERSION"
  register: init_status

- name: Initialize database
  ansible.builtin.command: "/usr/pgsql-{{ PGSQL_VERSION }}/bin/postgresql-{{ PGSQL_VERSION }}-setup initdb"
  when: not init_status.stat.exists

- name: Start and enable postgresql service
  ansible.builtin.service:
    name: "{{ POSTGRESQL_SERVICE }}"
    state: started
    enabled: yes

- name: Create database user
  become_user: postgres
  become: yes
  no_log: True
  community.postgresql.postgresql_user:
    name: "{{ PRIVX_DATABASE_USERNAME }}"
    password: "{{ PRIVX_DATABASE_PASSWORD }}"
    role_attr_flags: CREATEDB

- name: Create database
  become_user: postgres
  become: yes
  community.postgresql.postgresql_db:
    name: "{{ PRIVX_DATABASE_NAME }}"
    owner: "{{ PRIVX_DATABASE_USERNAME }}"

- name: Install openssl
  ansible.builtin.dnf:
    name: openssl
    state: present

- name: Generate an OpenSSL private key
  community.crypto.openssl_privatekey:
    path: "{{ PGSQL_PATH }}/server.key"
    owner: postgres
    group: postgres
    mode: 0600

- name: Generate an OpenSSL Certificate Signing Request
  community.crypto.openssl_csr:
    path: "{{ PGSQL_PATH }}/server.csr"
    privatekey_path: "{{ PGSQL_PATH }}/server.key"
    common_name: "{{ ansible_fqdn }}"
    owner: postgres
    group: postgres
    mode: 0600

- name: Generate an OpenSSL certificate
  community.crypto.x509_certificate:
    path: "{{ PGSQL_PATH }}/server.crt"
    privatekey_path: "{{ PGSQL_PATH }}/server.key"
    csr_path: "{{ PGSQL_PATH }}/server.csr"
    provider: selfsigned
    owner: postgres
    group: postgres
    mode: 0644

- name: Update listen_addresses
  ansible.builtin.lineinfile:
    path: "{{ POSTGRESQL_CONFIG }}"
    regexp: "{{ item.regex }}"
    line: "{{ item.line }}"
  with_items:
    - { regex: "^#listen_addresses", line: "listen_addresses = '*'" }
    - { regex: "^max_connections = 100", line: "max_connections = 1000" }
    - { regex: "^#ssl = off", line: "ssl = on" }
    - { regex: "#ssl_cert_file", line: "ssl_cert_file = 'server.crt'"}
    - { regex: "#ssl_key_file", line: "ssl_key_file = 'server.key'"}

- name: Grant access from privx ip
  community.general.postgresql_pg_hba:
    dest: "{{ PG_HBA_CONFIG }}"
    contype: host
    source: "{{ item }}"
  with_inventory_hostnames:
    - privx
  notify:
    - Restart postgresql service
